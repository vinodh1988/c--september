#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

int[] numbers={1,34,5,3,4,43,645};
Console.WriteLine(numbers);
Console.WriteLine(numbers[0]);
Console.WriteLine(numbers[3]);
Console.WriteLine(($"Number of elements in numbers: {numbers.Length}"));
Console.WriteLine("___________________________");
for(int x=0;x<numbers.Length;x++)
    Console.Write(numbers[x]+"  ");

#!csharp

int[] x=new int[5]; //syntax to give size
x[3]=45;
for(int i=0;i<x.Length;i++)
    Console.Write(x[i]+"  ");
Console.WriteLine("\n--------------------------------");
foreach(int a in x)
    Console.Write(a+" ");

#!csharp

string[] names={"Rakesh","Naresh","Joseph","Arjun"};
string[] team=new String[10];
for(int x=0;x<names.Length;x++)
   team[x]=names[x];
Console.WriteLine($"length of team {team.Length}");
for(int x=0;x<team.Length;x++)
   Console.WriteLine(team[x]??"Null");

foreach(string temp in team)
   Console.WriteLine(temp??"EMPTY");

#!markdown

### RANGE

#!csharp

int[] x={123,534,348,353,4,6,934,34,60,39,34};
int[] p=x[1..5];

foreach(int a in p)
  Console.WriteLine($"{a}");

#!csharp

int[] x={123,534,348,353,4,6,934,34,60,39,34};
int[] p=x[0..^2];

foreach(int a in p)
  Console.WriteLine($"{a}");

#!markdown

### Sorting, Max, Min

#!csharp

int[] x={34,3434,534,3434,35,56,23,34,366,343,33,31,6,4,43,435};

Array.Sort(x);

foreach(int a in x)
   Console.Write(a+" ");

Console.Write($" \n Max: {x.Max()}");
Console.Write($" \n Max: {x.Min()}");

#!csharp

int[ , ] matrix  =  {
    {1,2,3},{2,3,4}
};

Console.WriteLine(matrix[1,2]); //2nd row third element
Console.WriteLine(matrix[0,1]); //first row 2nd element
Console.WriteLine(matrix[0,2]); //First row 3rd element

#!csharp

int[,,] classroom  =  {
    { {101,102,103,104},{108,109,105,123},{143,155,155,166} },
    { {211,202,203,244},{208,209,205,223},{245,255,215,266} },
    { {301,302,303,304},{308,309,305,323},{333,352,355,366} }
};

Console.WriteLine(classroom.Rank); // number of dimensions
Console.WriteLine(classroom.GetLength(0)); //number of rooms
Console.WriteLine(classroom.GetLength(1)); // number of rows
Console.WriteLine(classroom.GetLength(2)); // number of columns
Console.WriteLine();

for(int i=0;i<classroom.GetLength(0);i++){
   Console.WriteLine($"================ ROOM {i+1}===================");
    for(int j=0;j<classroom.GetLength(1);j++){
      
          for(int k=0;k<classroom.GetLength(2);k++){
               Console.Write(classroom[i,j,k]+" ");
          }
          Console.WriteLine();
    }
    Console.WriteLine("===============================================");
}

#!csharp

int[ , ] matrix  =  {
    {1,2,3,4},{2,3,4,6},{3,5,5,6}
};

Console.WriteLine(matrix.Rank); // number of dimensions
Console.WriteLine(matrix.GetLength(0)); //number of rows
Console.WriteLine(matrix.GetLength(1)); // number of columns
Console.WriteLine();

for(int i=0;i<matrix.GetLength(0);i++){
    for(int j=0;j<matrix.GetLength(1);j++){
        Console.Write(matrix[i,j]+" ");
    }
    Console.WriteLine();
}

#!markdown

### Jagged Array

#!csharp

string[][] teams=  new string[3][]; 

teams[0] =new string[3] {"Rahul","Roshan","Giri"} ;
teams[1] =new string[5] {"Lara","Harry","Jake","Linda","Nixon"};
teams[2] =new string[2] {"Matt","Joe"};

for(int i=0;i<teams.Length;i++){
    Console.Write($"\n Team {i+1}:  ");
    for(int j=0;j<teams[i].Length;j++){
         Console.Write(teams[i][j]+" ");
    }
    Console.WriteLine();
}

#!csharp

""
